Each dataset will have at least 2 classes, including 1 'negative' class which consists of
data that does not match any pattern.

To import this data, use the NumPy.fromfile(<filename>) function. Then reshape the data.
For example, to import dataset 1:

x = np.fromfile("x_train1.txt")
x = x.reshape((378, 3, 5, 1))
y = np.fromfile("y_train1.txt")
y = y.reshape((378, 2))

Dataset 1: Process connects to a socket, then writes to a file.

Field count = 1
Field size = 3
Stride = 3
HASH_PROPERTIES = ['cmdline', 'name', 'ips', 'client_port', 'meta_login']
HASH_FN = hash_labels_prop
RECEPTIVE_FIELD_HASH = hash_simhash
LABELING_FN = get_ts
CLASS_COUNT = 2
DEFAULT_TENSOR_VAL = 0
CLEAN_TRAIN_DATA = False
x_train1.shape = (378, 3, 5, 1)
y_train1.shape = (378, 2)
#######################################################

Dataset 2: Process connects to a socket, then writes to a file. Process connects to a socket,

then executes a file
Field count = 1
Field size = 3
Stride = 3
HASH_PROPERTIES = ['cmdline', 'name', 'ips', 'client_port', 'meta_login']
HASH_FN = hash_labels_prop
RECEPTIVE_FIELD_HASH = hash_simhash
LABELING_FN = get_ts
CLASS_COUNT = 3
DEFAULT_TENSOR_VAL = 0
CLEAN_TRAIN_DATA = False
x_train2.shape = (6000, 3, 5, 1)
y_train2.shape = (6000, 3)
#######################################################

Dataset 3: Process connects to a socket, then writes to a file, then executes a file.

Field count = 1
Field size = 4
Stride = 4
HASH_PROPERTIES = ['cmdline', 'name', 'ips', 'client_port', 'meta_login']
HASH_FN = hash_labels_prop
RECEPTIVE_FIELD_HASH = hash_simhash
LABELING_FN = get_ts
CLASS_COUNT = 2
DEFAULT_TENSOR_VAL = 0
CLEAN_TRAIN_DATA = False
x_train3.shape = (2000, 4, 5, 1)
y_train3.shape = (2000, 2)

#######################################################

Dataset 4: There are 4 nodes, where 3 nodes have an edge to a central node. No constraints
on the labels of the nodes. Each node has a standard name ('/standard/name') and a cmdline
made of 10 random numbers delimited by a '/'. The exception is a randomly chosen node,
whose cmdline is comprised of 9 random numbers and a randomly inserted '-k'
(e.g '/132/../123/ -k /333/').

The negative data is exactly the same, except it does not have a randomly chosen node with a
randomly inserted '-k'.

Field count = 1
Field size = 4
Stride = 4
HASH_PROPERTIES = ['cmdline', 'name', 'ips', 'client_port', 'meta_login']
HASH_FN = hash_labels_prop
RECEPTIVE_FIELD_HASH = hash_simhash
LABELING_FN = get_ts
CLASS_COUNT = 2
DEFAULT_TENSOR_VAL = 0
CLEAN_TRAIN_DATA = False
EMBEDDING_LENGTH = 10
EMBEDDING_DIM = 10
VOCAB_SIZE = 1000
MAX_NODES = 4
x_patchy4.shape = (2000, 4, 5, 1)
x_embed4.shape = (2000, 80)
y_train4.shape = (2000, 2)

#######################################################

Dataset 5: There are 4 nodes, where 3 nodes have an edge to a central node. No constraints
on the labels of the nodes. Each node has a standard name ('/standard/name') and a cmdline
made of 100 random numbers delimited by a '/'. The exception is a randomly chosen node,
whose cmdline is comprised of 99 random numbers and a randomly inserted '-k'
(e.g '/132/../123/ -k /333/').

The negative data is exactly the same, except it does not have a randomly chosen node with a
randomly inserted '-k'.

This dataset causes the model to overfit completely.

Field count = 1
Field size = 4
Stride = 4
HASH_PROPERTIES = ['cmdline', 'name', 'ips', 'client_port', 'meta_login']
HASH_FN = hash_labels_prop
RECEPTIVE_FIELD_HASH = hash_simhash
LABELING_FN = get_ts
CLASS_COUNT = 2
DEFAULT_TENSOR_VAL = 0
CLEAN_TRAIN_DATA = False
EMBEDDING_LENGTH = 100
EMBEDDING_DIM = 10
VOCAB_SIZE = 1000
MAX_NODES = 4
x_patchy5.shape = (2000, 4, 5, 1)
x_embed5.shape = (2000, 80)
y_train5.shape = (2000, 2)

#######################################################

Dataset 6: A 6-node pattern. 2 files have have an edge to a process. 2 other files have an edge
to a pipe. The pipe has an edge to the process. The edge states, edge labels, node labels and
node properties are set to some custom value.

In the negative data, either a random edge, a random node's labels or a random node's cmdline is
changed, with equal probability.

FIELD_COUNT = 1
MAX_FIELD_SIZE = 6
STRIDE = 6
HASH_PROPERTIES = ['cmdline', 'name', 'ips', 'client_port', 'meta_login']
HASH_FN = hash_labels_prop
RECEPTIVE_FIELD_HASH = hash_simhash
LABELING_FN = get_ts
CLASS_COUNT = 2
DEFAULT_TENSOR_VAL = 0
CLEAN_TRAIN_DATA = False
EMBEDDING_LENGTH = 10
EMBEDDING_DIM = 10
VOCAB_SIZE = 1000
MAX_NODES = 6
EDGE_PROPERTIES = ['state']
EDGE_PROP_COUNT = 2
x_patchy_nodes6.shape = (2000, 6, 5, 1)
x_patchy_edges6.shape = (2000, 36, 2, 1)
x_embed6.shape = (2000, 120)
y_train6.shape = (2000, 2)
